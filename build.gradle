import io.github.fabricators_of_create.porting_lib_build.PortingLibBuildPlugin

//file:noinspection GroovyAssignabilityCheck
//file:noinspection GroovyAccessibility
plugins {
	id "fabric-loom" version "1.5.+"
	id "org.ajoberstar.grgit" version "4.1.1"
	id "maven-publish"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = "porting_lib"
version = project.mod_version

String buildNumber = System.getenv("GITHUB_RUN_NUMBER")
String patch = buildNumber != null ? buildNumber : "99999"

version = version.replace("<patch>", patch)

if (grgit != null) {
	version += "+${grgit.getBranch().current().name}"
} else {
	version += "+custom_unknown"
}

dependencies {
	subprojects.forEach {
		api(include(project(path: ":$it.name", configuration: "namedElements")))
	}
}

processResources {
	exclude("template.fabric.mod.json")
}

allprojects {
	if (name == "buildSrc") return

	apply plugin: "fabric-loom"
	apply plugin: PortingLibBuildPlugin

	group = "io.github.fabricators_of_create.Porting-Lib"

	repositories {
		mavenCentral()
		maven { url = "https://maven.quiltmc.org/repository/release" }
		maven { url = "https://hephaestus.dev/release" }
		maven { url = "https://api.modrinth.com/maven" }
		maven { url = "https://maven.bai.lol" }
		maven { url = "https://maven.terraformersmc.com/releases/" }
		maven { url = "https://maven.parchmentmc.org" }
		maven { url = "https://maven.shedaniel.me/" }
		maven { url = "https://mvn.devos.one/releases/" }
		maven { url = "https://mvn.devos.one/snapshots/" }
		maven { url = "https://maven.wispforest.io" }
		maven { url = "https://cursemaven.com" }
		maven { url = "https://maven.vram.io" }
		maven {
			url = "https://jitpack.io"
			content {
				includeGroup("com.github.Chocohead")
			}
		}
		maven {
			url = "https://maven.jamieswhiteshirt.com/libs-release"
			content {
				includeGroup "com.jamieswhiteshirt"
			}
		}
	}

	dependencies {
		// dev environment
		minecraft("com.mojang:minecraft:$minecraft_version")
		mappings(loom.layered {
			it.mappings("org.quiltmc:quilt-mappings:$minecraft_version+build.$qm_version:intermediary-v2")
			if (parchment_version != "none")
				it.parchment("org.parchmentmc.data:parchment-$minecraft_version:$parchment_version@zip")
			it.officialMojangMappings { nameSyntheticMembers = false }
		})
		modImplementation("net.fabricmc:fabric-loader:$loader_version")

		modLocalRuntime("com.terraformersmc:modmenu:$modmenu_version") { exclude group: "net.fabricmc"; exclude group: "net.fabricmc.fabric-api" }

		// common dependencies
		// each module can also specify additional ones
		modImplementation("net.fabricmc.fabric-api:fabric-api:$fabric_version")

		implementation("javax.annotation:javax.annotation-api:1.3.2")
		implementation("com.google.code.findbugs:jsr305:3.0.2")
	}

	loom {
		runs.configureEach {
			vmArg("-Dmixin.debug.export=true")
			ideConfigGenerated = true
		}
	}

	processResources {
		Map<String, ?> properties = [
				version: version,
				loader_version: loader_version,
				fabric_version: fabric_version,
				minecraft_version: minecraft_semantic_version,
				java_version: sourceCompatibility,

				// property replacement is a bit too eager
				class_5124: "\$class_5124",
				class_56: "\$class_56"
		]

		properties.forEach(inputs::property)

		filesMatching("fabric.mod.json") {
			expand properties
		}
	}

	tasks.register("buildOrPublish") {
		group = "build"
		String mavenUser = System.getenv("MAVEN_USER")
		if (mavenUser != null && !mavenUser.isEmpty()) {
			dependsOn(tasks.named("publish"))
			println "prepared for publish"
		} else {
			dependsOn(tasks.named("build"))
			println "prepared for build"
		}
	}

	tasks.withType(AbstractArchiveTask).configureEach {
		reproducibleFileOrder = true
	}
}

subprojects {
	apply plugin: "maven-publish"

	version = rootProject.version
	archivesBaseName = "porting_lib_" + name

	dependencies {
		if (name != "gametest" && name != "core") {
			moduleDependencies(project, ["core"])
		}
	}

	loom {
		runs.configureEach {
			File output = file("src/main/resources/data/porting_lib_$name/structures/gametest")
			property("porting_lib.gametest.quickexport.output", output.absolutePath)
		}
		mods.register("porting_lib_" + name) {
			sourceSet sourceSets.main
		}
		File aw = file("src/main/resources/porting_lib_${name}.accesswidener")
		if (aw.exists())
			accessWidenerPath.set(aw)
	}

	processResources {
		// make it always run, because if it doesn't, extreme weirdness with caching occurs with every other build.
		outputs.upToDateWhen { false }
	}

	java.withSourcesJar()

	publishing {
		repositories {
			maven {
				url = "https://mvn.devos.one/snapshots/"
				credentials {
					username = System.getenv("MAVEN_USER")
					password = System.getenv("MAVEN_PASS")
				}
				authentication {
					basic(BasicAuthentication)
				}
			}
		}

		publications {
			mavenJava(MavenPublication) {
				artifact(remapJar) {
					builtBy(remapJar)
				}

				artifact(remapSourcesJar) {
					builtBy remapSourcesJar
				}
			}
		}
	}
}

portingLib {
	expandFmj = false
}

// utilities for modules

def fabricAsm(DependencyHandler deps) {
	deps.modImplementation(deps.include("me.shedaniel:mm:2.4.1"))
}

def testMod(Project project) {
	project.sourceSets {
		testmod {
			compileClasspath += main.compileClasspath
			compileClasspath += main.output
			runtimeClasspath += main.runtimeClasspath
			runtimeClasspath += main.output
		}
	}

	project.loom.runs {
		testmodClient {
			client()
			name "Testmod Client"
			source project.sourceSets.testmod
			runDir "run/test"
		}
		testmodServer {
			server()
			name "Testmod Server"
			source project.sourceSets.testmod
			runDir "run/test_server"
		}
	}
}

def moduleDependencies(Project project, List<String> depNames) {
	def deps = depNames.iterator().collect { project.dependencies.project(path: ":$it", configuration: "namedElements") }

	depNames.iterator().forEachRemaining {
		Project dependProject = findProject(":$it")
		project.loom {
			interfaceInjection {
				interfaceInjectionSourceSets.add(dependProject.sourceSets.main)
			}
		}
	}
	project.dependencies {
		deps.each {
			annotationProcessor(api(include(it)))
		}
	}

	project.publishing {
		publications {
			mavenJava(MavenPublication) {
//				pom.withXml {
//					def depsNode = asNode().appendNode("dependencies")
//					deps.each {
//						def depNode = depsNode.appendNode("dependency")
//						depNode.appendNode("groupId", it.group)
//						depNode.appendNode("artifactId", it.name)
//						depNode.appendNode("version", it.version)
//						depNode.appendNode("scope", "compile")
//					}
//				}
			}
		}
	}
}

def setupDatagen(Project module) {
	setupDatagen(module, "porting_lib_" + module.name)
}

def setupDatagen(Project module, String modId) {
	module.loom {
		runs {
			datagen {
				client()
				name = "Data Generation"
				source module.sourceSets.main
				vmArg "-Dfabric-api.datagen"
				vmArg "-Dfabric-api.datagen.output-dir=${module.file("src/generated/resources")}"
				vmArg "-Dfabric-api.datagen.modid=$modId"
				runDir "build/datagen"
				ideConfigGenerated true // loom will only make run configs for the root project by default
			}
		}
	}
	module.sourceSets.main.resources {
		srcDir("src/generated/resources")
		exclude("src/generated/resources/.cache")
	}
	module.sourcesJar {
		// don't know why stuff is copied twice but it's harmless and way too much work to debug
		duplicatesStrategy = DuplicatesStrategy.EXCLUDE // exclude - ignore duplicates
	}
}
